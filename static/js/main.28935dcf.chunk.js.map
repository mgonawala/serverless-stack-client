{"version":3,"sources":["containers/Home.js","containers/NotFound.js","containers/LoaderButton.js","libs/hooksLib.js","containers/Login.js","containers/AppliedRouter.js","containers/Signup.js","config.js","containers/NewNotes.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","NotFound","LoaderButton","isLoading","disabled","props","Button","Glyphicon","glyph","children","useFormFields","initialState","useState","fields","setValues","event","target","id","value","Login","email","password","handleFieldChange","setIsLoading","a","preventDefault","Auth","signIn","user","console","log","userHasAuthenticated","alert","history","push","message","onSubmit","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","type","onChange","block","length","AppliedRoute","C","component","appProps","rest","render","Signup","confirmPassword","confirmationCode","newUser","setNewUser","handleSubmit","signUp","username","handleConfirmationSubmit","confirmSignUp","HelpBlock","REGION","process","BUCKET","URL","USER_POOL_ID","APP_CLIENT_ID","IDENTITY_POOL_ID","NewNote","file","useRef","content","setContent","current","size","config","componentClass","e","files","bsStyle","Routes","path","exact","withRouter","isAuthenticating","setIsAuthenticating","isAuthenticated","currentSession","signOut","useEffect","onLoad","Navbar","fluid","collapseOnSelect","Header","Brand","to","Collapse","Nav","pullRight","NavItem","onClick","Boolean","window","location","hostname","match","Amplify","configure","mandatorySignIn","region","userPoolId","identityPoolId","userPoolWebClientId","Storage","bucket","API","endpoints","name","endpoint","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.28935dcf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Home.css\";\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div className=\"Home\">\r\n            <div className=\"lander\">\r\n                <h1>Scratch</h1>\r\n                <p>A simple note taking app</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./NotFound.css\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div className=\"NotFound\">\r\n            <h3>Sorry, page not found!</h3>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { Button, Glyphicon } from \"react-bootstrap\";\r\nimport \"./LoaderButton.css\";\r\n\r\nexport default function LoaderButton({\r\n                                         isLoading,\r\n                                         className = \"\",\r\n                                         disabled = false,\r\n                                         ...props\r\n                                     }) {\r\n    return (\r\n        <Button\r\n            className={`LoaderButton ${className}`}\r\n            disabled={disabled || isLoading}\r\n            {...props}\r\n        >\r\n            {isLoading && <Glyphicon glyph=\"refresh\" className=\"spinning\" />}\r\n            {props.children}\r\n        </Button>\r\n    );\r\n}","import { useState } from \"react\";\r\n\r\nexport function useFormFields(initialState) {\r\n    const [fields, setValues] = useState(initialState);\r\n\r\n    return [\r\n        fields,\r\n        function(event) {\r\n            setValues({\r\n                ...fields,\r\n                [event.target.id]: event.target.value\r\n            });\r\n        }\r\n    ];\r\n}","import React, { useState } from \"react\";\r\nimport {  FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport \"./Login.css\";\r\nimport { Auth } from \"aws-amplify\";\r\nimport LoaderButton from \"./LoaderButton\";\r\nimport {useFormFields} from \"../libs/hooksLib\";\r\n\r\nexport default function Login(props) {\r\n\r\n    const [fields, handleFieldChange] = useFormFields({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n\r\n    function validateForm() {\r\n        return fields.email.length > 0 && fields.password.length > 0;\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        try {\r\n            const user = await Auth.signIn(fields.email, fields.password);\r\n            console.log(user);\r\n            props.userHasAuthenticated(true);\r\n            alert(\"Logged in\");\r\n            props.history.push('/');\r\n        } catch (e) {\r\n            alert(e.message);\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Login\">\r\n            <form onSubmit={handleSubmit}>\r\n                <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                    <ControlLabel >Email</ControlLabel>\r\n                    <FormControl\r\n                        autoFocus\r\n                        type=\"email\"\r\n                        value={fields.email}\r\n                        onChange={handleFieldChange}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                    <ControlLabel>Password</ControlLabel>\r\n                    <FormControl\r\n                        value={fields.password}\r\n                        onChange={handleFieldChange}\r\n                        type=\"password\"\r\n                    />\r\n                </FormGroup>\r\n                <LoaderButton\r\n                    block\r\n                    type=\"submit\"\r\n                    bsSize=\"large\"\r\n                    isLoading={isLoading}\r\n                    disabled={!validateForm()}\r\n                >\r\n                    Login\r\n                </LoaderButton>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\n\r\nexport default function AppliedRoute({component: C, appProps, ...rest}){\r\nreturn(\r\n    <Route {...rest} render={(props)=><C  {...props} {...appProps}/> }/>\r\n);\r\n}","import React, { useState } from \"react\";\r\nimport {\r\n    HelpBlock,\r\n    FormGroup,\r\n    FormControl,\r\n    ControlLabel\r\n} from \"react-bootstrap\";\r\nimport LoaderButton from \"./LoaderButton\";\r\nimport { useFormFields } from \"../libs/hooksLib\";\r\nimport \"./Signup.css\";\r\nimport {Auth} from 'aws-amplify';\r\n\r\nexport default function Signup(props) {\r\n    const [fields, handleFieldChange] = useFormFields({\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        confirmationCode: \"\"\r\n    });\r\n    const [newUser, setNewUser] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    function validateForm() {\r\n        return (\r\n            fields.email.length > 0 &&\r\n            fields.password.length > 0 &&\r\n            fields.password === fields.confirmPassword\r\n        );\r\n    }\r\n\r\n    function validateConfirmationForm() {\r\n        return fields.confirmationCode.length > 0;\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            const newUser = await Auth.signUp({\r\n                username: fields.email,\r\n                password: fields.password\r\n            });\r\n            setIsLoading(false);\r\n            setNewUser(newUser);\r\n        } catch (e) {\r\n            alert(e.message);\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    async function handleConfirmationSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            await Auth.confirmSignUp(fields.email, fields.confirmationCode);\r\n            await Auth.signIn(fields.email, fields.password);\r\n\r\n            props.userHasAuthenticated(true);\r\n            props.history.push(\"/\");\r\n        } catch (e) {\r\n            alert(e.message);\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    function renderConfirmationForm() {\r\n        return (\r\n            <form onSubmit={handleConfirmationSubmit}>\r\n                <FormGroup controlId=\"confirmationCode\" bsSize=\"large\">\r\n                    <ControlLabel>Confirmation Code</ControlLabel>\r\n                    <FormControl\r\n                        autoFocus\r\n                        type=\"tel\"\r\n                        onChange={handleFieldChange}\r\n                        value={fields.confirmationCode}\r\n                    />\r\n                    <HelpBlock>Please check your email for the code.</HelpBlock>\r\n                </FormGroup>\r\n                <LoaderButton\r\n                    block\r\n                    type=\"submit\"\r\n                    bsSize=\"large\"\r\n                    isLoading={isLoading}\r\n                    disabled={!validateConfirmationForm()}\r\n                >\r\n                    Verify\r\n                </LoaderButton>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    function renderForm() {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                    <ControlLabel>Email</ControlLabel>\r\n                    <FormControl\r\n                        autoFocus\r\n                        type=\"email\"\r\n                        value={fields.email}\r\n                        onChange={handleFieldChange}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                    <ControlLabel>Password</ControlLabel>\r\n                    <FormControl\r\n                        type=\"password\"\r\n                        value={fields.password}\r\n                        onChange={handleFieldChange}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"confirmPassword\" bsSize=\"large\">\r\n                    <ControlLabel>Confirm Password</ControlLabel>\r\n                    <FormControl\r\n                        type=\"password\"\r\n                        onChange={handleFieldChange}\r\n                        value={fields.confirmPassword}\r\n                    />\r\n                </FormGroup>\r\n                <LoaderButton\r\n                    block\r\n                    type=\"submit\"\r\n                    bsSize=\"large\"\r\n                    isLoading={isLoading}\r\n                    disabled={!validateForm()}\r\n                >\r\n                    Signup\r\n                </LoaderButton>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"Signup\">\r\n            {newUser === null ? renderForm() : renderConfirmationForm()}\r\n        </div>\r\n    );\r\n}","export default {\r\n    s3: {\r\n        REGION: process.env.REACT_APP_S3_REGION,\r\n        BUCKET: process.env.REACT_APP_S3_BUCKET\r\n    },\r\n    apiGateway: {\r\n        REGION: process.env.REACT_APP_API_REGION,\r\n        URL: process.env.REACT_APP_API_URL\r\n    },\r\n    cognito: {\r\n        REGION: process.env.REACT_APP_COGNITO_REGION,\r\n        USER_POOL_ID: process.env.REACT_APP_COGNITO_USER_POOL_ID,\r\n        APP_CLIENT_ID: process.env.REACT_APP_COGNITO_CLIENT_ID,\r\n        IDENTITY_POOL_ID: process.env.REACT_APP_COGNITO_IDENTITY_POOL_ID\r\n    },\r\n    MAX_ATTACHMENT_SIZE: 5000000\r\n};","import React, { useRef, useState } from \"react\";\r\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport LoaderButton from \"./LoaderButton\";\r\nimport config from \"../config\";\r\nimport \"./NewNote.css\";\r\n\r\nexport default function NewNote(props) {\r\n    const file = useRef(null);\r\n    const [content, setContent] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    function validateForm() {\r\n        return content.length > 0;\r\n    }\r\n\r\n    function handleFileChange(event) {\r\n        file.current = event.target.files[0];\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (file.current && file.current.size > config.MAX_ATTACHMENT_SIZE) {\r\n            alert(\r\n                `Please pick a file smaller than ${config.MAX_ATTACHMENT_SIZE /\r\n                1000000} MB.`\r\n            );\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"NewNote\">\r\n            <form onSubmit={handleSubmit}>\r\n                <FormGroup controlId=\"content\">\r\n                    <FormControl\r\n                        value={content}\r\n                        componentClass=\"textarea\"\r\n                        onChange={e => setContent(e.target.value)}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"file\">\r\n                    <ControlLabel>Attachment</ControlLabel>\r\n                    <FormControl onChange={handleFileChange} type=\"file\" />\r\n                </FormGroup>\r\n                <LoaderButton\r\n                    block\r\n                    type=\"submit\"\r\n                    bsSize=\"large\"\r\n                    bsStyle=\"primary\"\r\n                    isLoading={isLoading}\r\n                    disabled={!validateForm()}\r\n                >\r\n                    Create\r\n                </LoaderButton>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./containers/Home\";\r\nimport NotFound from \"./containers/NotFound\";\r\nimport Login from \"./containers/Login\";\r\nimport AppliedRoute from \"./containers/AppliedRouter\";\r\nimport Signup from \"./containers/Signup\";\r\nimport NewNote from \"./containers/NewNotes\";\r\n\r\nexport default function Routes({appProps}) {\r\n    return (\r\n        <Switch>\r\n            <AppliedRoute path=\"/\" exact component={Home}  appProps={appProps}/>\r\n            <AppliedRoute path=\"/login\" exact component={Login}  appProps={appProps}/>\r\n            <AppliedRoute path=\"/signup\" exact component={Signup} appProps={appProps} />\r\n            <AppliedRoute path=\"/notes/new\" exact component={NewNote} appProps={appProps} />\r\n            <AppliedRoute component={NotFound} appProps={appProps} />\r\n        </Switch>\r\n    );\r\n}","import React,{useState, useEffect} from 'react';\nimport {Navbar, Nav, NavItem} from \"react-bootstrap\";\nimport './App.css';\nimport {Link, withRouter} from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {Auth} from 'aws-amplify';\n\n\n\nfunction App(props) {\n  const [isAuthenticating, setIsAuthenticating] = useState(true);\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\n\n  useEffect(() => {\n    onLoad();\n  },[]);\n\n  async function onLoad(){\n    try{\n      await Auth.currentSession();\n      userHasAuthenticated(true);\n    }\n    catch(e){\n        console.log(e);\n    }\n    setIsAuthenticating(false);\n  }\n\n  async function handleLogout() {\n    await Auth.signOut();\n    userHasAuthenticated(false);\n    props.history.push('/login');\n  }\n\n  return (\n     !isAuthenticating &&\n   <div className=\"App container\">\n    <Navbar fluid collapseOnSelect>\n    <Navbar.Header>\n      <Navbar.Brand>\n        <Link to=\"/\" >Scratch</Link>\n      </Navbar.Brand>\n    </Navbar.Header>\n\n      <Navbar.Collapse>\n        <Nav pullRight>\n\n          { isAuthenticated ? <NavItem onClick={handleLogout}>Logout</NavItem> :\n          <>\n          <LinkContainer to=\"/signup\">\n          <NavItem >Signup</NavItem>\n          </LinkContainer>\n\n          <LinkContainer to=\"/login\">\n            <NavItem >login</NavItem>\n          </LinkContainer>\n          </>\n          }\n        </Nav>\n      </Navbar.Collapse>\n\n    </Navbar>\n     <Routes appProps={{ isAuthenticated, userHasAuthenticated }}/>\n\n   </div>\n  );\n}\n\nexport default  withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Amplify from \"aws-amplify\";\nimport config from './config';\n\n\nAmplify.configure({\n    Auth: {\n        mandatorySignIn: true,\n        region: config.cognito.REGION,\n        userPoolId: config.cognito.USER_POOL_ID,\n        identityPoolId: config.cognito.IDENTITY_POOL_ID,\n        userPoolWebClientId: config.cognito.APP_CLIENT_ID\n    },\n    Storage: {\n        region: config.s3.REGION,\n        bucket: config.s3.BUCKET,\n        identityPoolId: config.cognito.IDENTITY_POOL_ID\n    },\n    API: {\n        endpoints: [\n            {\n                name: \"notes\",\n                endpoint: config.apiGateway.URL,\n                region: config.apiGateway.REGION\n            },\n        ]\n    }\n});\n\nReactDOM.render(\n    <Router>\n    <App />\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}